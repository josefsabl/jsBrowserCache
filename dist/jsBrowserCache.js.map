{"version":3,"sources":["../src/jsBrowserCache.js"],"names":["JsBrowserCache","options","_options","prefix","storage","_seconds","_setStorage","testSupportsStorage","key","value","_supportsStorage","undefined","_storage","_setItem","_removeItem","e","_IsExceptionOutOfSpace","length","expiration","record","actualTimeStamp","Date","getTime","isSupportsStorage","_jsonToString","create","expire","clearExpirate","_getItem","_stringToJson","keys","Object","filter","v","indexOf","i","replace","storageName","localStorage","sessionStorage","setItem","getItem","removeItem","json","JSON","stringify","string","parse","name"],"mappings":"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","file":"jsBrowserCache.js","sourcesContent":["\"use strict\";\r\n\r\n/**\r\n * @class JsBrowserCache\r\n * JsBrowserCache je trida na ukladani a ziskavani dat z localStorage a sessionStorage s moznosti expirace zaznamu ve storage\r\n */\r\nclass JsBrowserCache {\r\n    \r\n    /**\r\n     * @constructor\r\n     * @param {Object} options nastaveni\r\n     * @example\r\n     *  {\r\n     *      prefix: 'cache-', // Nasatveni prefixu. Defaultni hodnota je 'cache-'.Prefix se bude pridavat k ID zaznamu, ktery se bude ukladat do storage\r\n     *      storage: 'session', // Nasatveni typu uloziste. Defaultni hodnota je 'local'. 'local' je pro nastaveni localStorage a 'session' je pro nastaveni sessionStorage\r\n     *  }\r\n     */\r\n    constructor(options) {\r\n        console.info('Creat object JsBrowserCache');\r\n\r\n        /**\r\n         * nastaveni tridy\r\n         * @private\r\n         * @type {Object}\r\n         */\r\n        this._options = Object.assign({}, {\r\n            prefix : 'cache-',\r\n            storage: 'local'\r\n\r\n        }, options || {});\r\n\r\n        /**\r\n         * pomocna promena pro prepocet z milisekund na sekundy\r\n         * @private\r\n         * @type {Number}\r\n         */\r\n        this._seconds = 1*1000;\r\n\r\n        //nastavim storage\r\n        this._setStorage();\r\n\r\n        //otestuji podporu storage\r\n        this.testSupportsStorage()\r\n    }\r\n\r\n    /**\r\n     * metoda testuje prohlizec na podporu storage\r\n     * @public\r\n     * @returns {Boolean}\r\n     */\r\n    testSupportsStorage() {\r\n        //vytvorim unikatni klic\r\n        let key = 'j8EiBTWwQV',\r\n            value = key;\r\n\r\n        //pokud jsem jiz testoval, tak nemusim znova\r\n        if (this._supportsStorage !== undefined) {\r\n            return this._supportsStorage;\r\n        }\r\n        \r\n        //otestuji jestli existuje kurzor na storage\r\n        if (!this._storage) {\r\n            return this._supportsStorage  = false;\r\n        }       \r\n    \r\n        try {\r\n            //spravnou funkcnost otestuji zapisem a ctenim z storage\r\n            this._setItem(key, value);\r\n            this._removeItem(key);\r\n            this._supportsStorage = true; //pokud projde zapis a cteni nastavim podporu na true\r\n        } catch (e) {\r\n            console.warn(e);\r\n            //otestuji jestli neni storage plna\r\n            if (this._IsExceptionOutOfSpace(e) && this._storage.length) {\r\n                this._supportsStorage  = true;\r\n            } else {\r\n                this._supportsStorage  = false;\r\n            }\r\n        }\r\n        return this._supportsStorage;\r\n    }\r\n\r\n    /**\r\n     * vrati true pokud prohlizec podporuje storage\r\n     * @public\r\n     * @returns {Boolean} \r\n     */\r\n    isSupportsStorage() {\r\n        if (!this._supportsStorage) {\r\n            console.warn('Browser does not support storage');\r\n        }\r\n        return this._supportsStorage;\r\n    }\r\n    \r\n    /**\r\n     * zapise hodnotu do storage\r\n     * \r\n     * @public\r\n     * \r\n     * @param {String} key unikatni klic zaznamu ve storage\r\n     * @param {String|Array|Object|Number} value hodnota muze byt String, Array, Json, Number\r\n     * @param {Number} expiration je nepovinny parametr a udava se v sekundach.\r\n     * \r\n     * @example\r\n     *  var cache = new JsBrowserCache();\r\n     *      cache.setItem('test1', 'test string');  \r\n     *      cache.setItem('test2', 'test string', 60); //expire 60 seconds   \r\n     * \r\n     * @returns {Bool} vrati hodntu true pokud se hodnota zapise do storage\r\n     */\r\n    setItem(key, value, expiration) {\r\n        let record,\r\n            actualTimeStamp = new Date().getTime();\r\n        \r\n        //otestuji jestli je podporovana storage\r\n        if(!this.isSupportsStorage()) {\r\n            return false;\r\n        }\r\n\r\n        console.info('Actual time stamp: ' + actualTimeStamp);\r\n        console.info('Expire: ' + (expiration ? actualTimeStamp + expiration*1*this._seconds : ''));\r\n\r\n        record = {\r\n            value: this._jsonToString(value),\r\n            create: actualTimeStamp,\r\n            expire: expiration ? actualTimeStamp + expiration*1*this._seconds : ''\r\n        }\r\n\r\n        console.info(record);\r\n\r\n        try {\r\n            this._removeItem(key);\r\n            this._setItem(key, this._jsonToString(record));\r\n            return true;\r\n        } catch (e) {\r\n            console.warn(e);\r\n            //zachytavam vyjimku pro pripad ze jeplna storage\r\n            if (this._IsExceptionOutOfSpace(e) && this._storage.length) {\r\n                this.clearExpirate();\r\n                this._setItem(key, this._jsonToString(record));\r\n                //a otestuji jestli se zapsala a vratim Bool\r\n                return !!this._getItem(key);\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * vrati hodnotu ze storage na zaklade zadaneho klice.\r\n     * @public\r\n     * @param {String} key klic zaznamu\r\n     *  \r\n     * @example\r\n     *  var cache = new JsBrowserCache();\r\n     *      cache.getItem('test');\r\n     * \r\n     * @returns {String|Array|Object|Number|Null} pokud klic neexistuje vrat√≠ null jinak vrati zapsanou hodnotu ve storage\r\n     */\r\n    getItem(key) {\r\n        let record;\r\n    \r\n        //otestuji jestli je podporovana storage\r\n        if(!this.isSupportsStorage()) {\r\n            return null;\r\n        }\r\n\r\n        //ziskam zaznma ze storage\r\n        record = this._getItem(key);\r\n\r\n        console.info(record);\r\n\r\n        //zjistim jestli polozka existuje\r\n        if(!record) {\r\n            return null;\r\n        }\r\n\r\n        //prevedu string na json\r\n        record = this._stringToJson(record);\r\n\r\n        console.info(record);\r\n\r\n        //otestuji jestli je polozka expirovana\r\n        if(record.expire && new Date().getTime() > record.expire) {\r\n            console.log('Item \"' + key + '\" is expired. Item is removed.');\r\n            this._removeItem(key);\r\n            return null;\r\n        } else {\r\n            return this._stringToJson(record.value);\r\n        }       \r\n    }\r\n\r\n    /**\r\n     * vymaze expirovane zaznamy ze storage\r\n     * @public\r\n     * \r\n     * @example\r\n     *  var cache = new JsBrowserCache();\r\n     *      cache.clearExpired();\r\n     * \r\n     */\r\n    clearExpired() {\r\n        let keys;\r\n        \r\n        //otestuji jestli je podporovana storage\r\n        if(!this.isSupportsStorage()) {\r\n            return null;\r\n        }\r\n\r\n        //pokud je neco v storage, tak pokracuji\r\n        if (this._storage.length > 0) {\r\n\r\n            //ziskam vsechny klice ktere odpovidaji prefixu\r\n            keys = Object.keys(this._storage).filter( v => v.indexOf(this._options.prefix)===0 );\r\n\r\n            if (keys.length > 0) {\r\n                for (let i = 0, length = keys.length; i < length; i++){\r\n                    let key = keys[i].replace(this._options.prefix,''), //odeberu u klice prefix\r\n                        record = this._stringToJson(this._getItem(key)); \r\n\r\n                    //otestuji jestli je polozka expirovana\r\n                    if(record.expire && new Date().getTime() > record.expire) {\r\n                        console.info('Item \"' + key + '\" is expired. Item is removed.'); \r\n                        this._removeItem(key);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * nastavi storage (local|session) local = localStorage, session = sessionStorage\r\n     * @private\r\n     * @param {String} storage nazev storage (local|session) \r\n     */\r\n    _setStorage(storageName) {\r\n        try {\r\n            this._storage = storageName !== 'session' ? localStorage : sessionStorage;\r\n        } catch(e) {\r\n            this._storage = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * ulozi zaznam do storage\r\n     * @private\r\n     * @param {String} key klic\r\n     * @param {String} value hodnota klice\r\n     */\r\n    _setItem(key, value) {\r\n        this._storage.setItem(this._options.prefix + key, value);\r\n    }\r\n\r\n    /**\r\n     * vrati zaznam ze storage\r\n     * @private\r\n     * @param {String} key klic\r\n     * @returns {String|Null} vrati hodntou klice jako string. Pokud klic neexistuje vrati Null\r\n     */\r\n    _getItem(key) {\r\n        return this._storage.getItem(this._options.prefix + key);\r\n    }\r\n\r\n    /**\r\n     * smaze zaznam ve storage\r\n     * @private\r\n     * @param {String} key \r\n     */\r\n    _removeItem(key) {\r\n        this._storage.removeItem(this._options.prefix + key);\r\n    }\r\n\r\n    /**\r\n     * prevede json na string\r\n     * @private\r\n     * @param {Object} json\r\n     * @returns {String} \r\n     */\r\n    _jsonToString(json) {\r\n        return JSON.stringify(json);\r\n    }\r\n\r\n    /**\r\n     * prevede string na json\r\n     * @private\r\n     * @param {String} string \r\n     * @returns {Object}\r\n     */\r\n    _stringToJson(string) {\r\n        return JSON.parse(string);\r\n    }\r\n\r\n    /**\r\n     * otestuje jestli je vyvolan√° vyj√≠mka na pln√Ω storge\r\n     * @private\r\n     * @param {Object} e exception\r\n     * @returns {Bool}\r\n     */\r\n    _IsExceptionOutOfSpace(e) {\r\n        return (e && e.name === 'QUOTA_EXCEEDED_ERR' ||\r\n            e.name === 'NS_ERROR_DOM_QUOTA_REACHED' ||\r\n            e.name === 'QuotaExceededError');\r\n    }\r\n}"]}